#pragma once

#include <materials/material.h>

class Principled : public Material
{
private:
    Color m_baseColor;
    double m_sheen;
    double m_sheenTint;
    double m_clearCoat;
    double m_clearCoatGloss;

private:
    /* Sheen */
    Color calculateSheenTintColor(Color baseColor);
    Color sheenPass(double LdotH);

    /* Clearcoat */
    double GTR1(double NdotH, double a);
    double smithG_GGX(double NdotV, double a);
    double clearcoatPass(double clearcoat, double clearCoatGloss, double NdotH, double NdotV, double NdotL, double HdotL);

    /* Specular BRDF */
    double GTR2(double NdotH, double a);


public:
    Principled(Color baseColor, double sheen = 0, double sheenTint = 0.5, double clearCoat = 0, double clearCoatGloss = 1) : m_baseColor(baseColor), m_sheen(sheen), m_sheenTint(sheenTint), m_clearCoat(clearCoat), m_clearCoatGloss(m_clearCoatGloss) {}
    bool scatter(const Ray &ray, const HitRecord &rec, Color &attenuation, Ray &scattered) const override;
};