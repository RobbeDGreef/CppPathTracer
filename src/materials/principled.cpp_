#include <vec3.h>
#include <materials/principled.h>
#include <cmath>

double constexpr inline sqr(double x) { return x * x; }

Color Principled::calculateSheenTintColor(Color baseColor)
{
    double luminance = dot(Color(0.3, 0.6, 1.0), baseColor);
    return (luminance > 0.0f) ? baseColor * (1.0f / luminance) : Color(1.0);
}

Color Principled::sheenPass(double LdotH) {
    if (m_sheen <= 0.0) {
        return Color(0);
    }

    Color tint = calculateSheenTintColor(m_baseColor);
    return m_sheen * lerp(Vec3(1.0), tint, m_sheenTint) * schlickFresnel(LdotH)
}

double Principled::GTR1(double NdotH, double a)
{
    if (a >= 1)
        return 1.0 / pi;

    double a2 = sqr(a);
    return (a2 - 1.0) / (pi * log(a2) * (1.0 + (a2 - 1.0) * sqr(NdotH)));
}

double Principled::smithG_GGX(double NdotV, double a)
{
    double a2 = sqr(a);
    double NdotV2 = sqr(NdotV);
    // todo: should this not be (a2 + NdotV - a2 * NdotV2) ???
    return 1 / (NdotV + sqrt(a2 + NdotV2 - a2 * NdotV2));
}

double Principled::GTR2(double NdotH, double a)
{
    double a2 = sqr(a);
    double t = 1.0 + (a2 - 1.0) * sqr(NdotH);
    return a2 / (pi * sqr(t));
}

float Principled::GTR2_aniso(float NdotH, float HdotX, float HdotY, float ax, float ay)
{
    return 1 / (PI * ax * ay * sqr(sqr(HdotX / ax) + sqr(HdotY / ay) + NdotH * NdotH));
}


float Principled::smithG_GGX_aniso(float NdotV, float VdotX, float VdotY, float ax, float ay)
{
    return 1.0 / (NdotV + sqrt(sqr(VdotX * ax) + sqr(VdotY * ay) + sqr(NdotV)));
}

static Vec3 mon2lin(Vec3 x)
{
    return Vec3(pow(x[0], 2.2), pow(x[1], 2.2), pow(x[2], 2.2));
}

double Principled::clearcoatPass(double clearcoat, double clearCoatGloss, double NdotH, double NdotV, double NdotL, double HdotL)
{
    // clearcoat (ior = 1.5 -> F0 = 0.04)
    double fresnel = 0.04 + (1 - 0.04) * schlickFresnel(HdotL);
    double d = GTR1(NdotH, lerp(0.1, .001, clearCoatGloss));
    double f = lerp(.04, 1.0, fresnel);
    double glv = smithG_GGX(NdotL, .25) * smithG_GGX(NdotV, .25);
    return .25 * clearcoat * glv * f * d;
}

// float BRDF( vec3 toLight, vec3 toViewer, vec3 normal, vec3 tangent, vec3 bitangent )

bool Principled::scatter(const Ray &ray, const HitRecord &rec, Color &attenuation, Ray &scattered) const
{
    double NdotL = dot(N, L);
    double NdotV = dot(N, V);
    if (NdotL < 0 || NdotV < 0)
        return vec3(0);

    vec3 H = normalize(L + V);
    double NdotH = dot(N, H);
    double LdotH = dot(L, H);

    vec3 Cdlin = mon2lin(baseColor);
    float Cdlum = .3 * Cdlin[0] + .6 * Cdlin[1] + .1 * Cdlin[2]; // luminance approx.

    vec3 Ctint = Cdlum > 0 ? Cdlin / Cdlum : vec3(1); // normalize lum. to isolate hue+sat
    vec3 Cspec0 = mix(specular * .08 * mix(vec3(1), Ctint, specularTint), Cdlin, metallic);
    vec3 Csheen = mix(vec3(1), Ctint, sheenTint);

    // Diffuse fresnel - go from 1 at normal incidence to .5 at grazing
    // and mix in diffuse retro-reflection based on roughness
    float FL = SchlickFresnel(NdotL), FV = SchlickFresnel(NdotV);
    float Fd90 = 0.5 + 2 * LdotH * LdotH * roughness;
    float Fd = mix(1.0, Fd90, FL) * mix(1.0, Fd90, FV);

    // Based on Hanrahan-Krueger brdf approximation of isotropic bssrdf
    // 1.25 scale is used to (roughly) preserve albedo
    // Fss90 used to "flatten" retroreflection based on roughness
    float Fss90 = LdotH * LdotH * roughness;
    float Fss = mix(1.0, Fss90, FL) * mix(1.0, Fss90, FV);
    float ss = 1.25 * (Fss * (1 / (NdotL + NdotV) - .5) + .5);

    // specular
    //float aspect = sqrt(1 - anisotropic * .9);
    //float ax = max(.001, sqr(roughness) / aspect);
    //float ay = max(.001, sqr(roughness) * aspect);
    //float Ds = GTR2_aniso(NdotH, dot(H, X), dot(H, Y), ax, ay);
    //float FH = schlickFresnel(LdotH);
    //vec3 Fs = mix(Cspec0, vec3(1), FH);
    //float Gs;
    //Gs = smithG_GGX_aniso(NdotL, dot(L, X), dot(L, Y), ax, ay);
    //Gs *= smithG_GGX_aniso(NdotV, dot(V, X), dot(V, Y), ax, ay);

    Color sheen = sheenPass(LdotH);
    double clearcoat = clearcoatPass(m_clearCoat, m_clearCoatGloss, NdotH, NdotV, NdotL, LdotH);

    return ((1 / pi) * mix(Fd, ss, subsurface) * Cdlin + Fsheen) * (1 - metallic) + Gs * Fs * Ds + clearcoat;
}